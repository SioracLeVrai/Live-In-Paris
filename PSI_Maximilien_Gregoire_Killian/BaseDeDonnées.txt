using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using MySql.Data.MySqlClient;
using MySqlX.XDevAPI.Common;

namespace PSI_Maximilien_Gregoire_Killian
{
    public class BaseDeDonnees
    {
        private MySqlConnection connexion = null;
        public bool Connecte = false;
        public int NoCompteCuisinier;
        public int NoCompteClient;
        public bool TypeDeCompte;

        public MySqlConnection Connexion
        {
            get { return connexion; }
        }

        public BaseDeDonnees()
        {

            try
            {
                string connexionString = "SERVER=localhost;PORT=3306;" +
                                         "DATABASE=LiveInParis;" +
                                         "UID=root;PASSWORD=root";

                this.connexion = new MySqlConnection(connexionString);
                this.connexion.Open();
            }
            catch (MySqlException e)
            {
                MessageBox.Show(" ErreurConnexion : " + e.ToString());
                return;
            }

        }

        public void SauvegarderXML()
        {
            try
            {
                var xmlDoc = new System.Xml.XmlDocument();
                var root = xmlDoc.CreateElement("LiveInParis");
                xmlDoc.AppendChild(root);

                // Liste des tables à sauvegarder
                string[] tables = { "Repas", "Données_Particulier", "Données_entreprise", "Compte_Client",
                           "Compte_Cuisinier", "Element_de_commande", "Ingrédient", "Commande",
                           "Comporte", "Propose" };

                foreach (string table in tables)
                {
                    var tableElement = xmlDoc.CreateElement(table);
                    root.AppendChild(tableElement);

                    string query = $"SELECT * FROM {table}";
                    using (MySqlCommand cmd = new MySqlCommand(query, connexion))
                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var rowElement = xmlDoc.CreateElement("Row");
                            for (int i = 0; i < reader.FieldCount; i++)
                            {
                                var fieldElement = xmlDoc.CreateElement(reader.GetName(i));
                                fieldElement.InnerText = reader[i]?.ToString() ?? "";
                                rowElement.AppendChild(fieldElement);
                            }
                            tableElement.AppendChild(rowElement);
                        }
                    }
                }

                xmlDoc.Save("BDD_XML.xml");
            }
            catch (Exception e)
            {
                MessageBox.Show("Erreur lors de la sauvegarde XML : " + e.Message);
            }
        }

        public void ChargerXML()
        {
            try
            {
                var xmlDoc = new System.Xml.XmlDocument();
                xmlDoc.Load("BDD_XML.xml");

                // Désactiver temporairement les contraintes de clés étrangères
                using (MySqlCommand cmd = new MySqlCommand("SET FOREIGN_KEY_CHECKS=0;", connexion))
                {
                    cmd.ExecuteNonQuery();
                }

                // Liste des tables dans l'ordre d'insertion (pour respecter les dépendances)
                string[] tables = { "Repas", "Données_Particulier", "Données_entreprise", "Compte_Client",
                           "Compte_Cuisinier", "Element_de_commande", "Ingrédient", "Commande",
                           "Comporte", "Propose" };

                foreach (string table in tables)
                {
                    // Vider la table
                    using (MySqlCommand cmd = new MySqlCommand($"TRUNCATE TABLE {table};", connexion))
                    {
                        cmd.ExecuteNonQuery();
                    }

                    var tableNodes = xmlDoc.SelectNodes($"//{table}/Row");
                    foreach (System.Xml.XmlNode row in tableNodes)
                    {
                        var columns = new List<string>();
                        var values = new List<string>();
                        foreach (System.Xml.XmlNode field in row.ChildNodes)
                        {
                            columns.Add(field.Name);
                            string value = field.InnerText.Replace("'", "''"); // Échapper les apostrophes
                            if (string.IsNullOrEmpty(value) && field.Name.Contains("No_"))
                                values.Add("NULL");
                            else if (field.Name == "Prix_par_personnes" && float.TryParse(value, out float floatValue))
                                values.Add(floatValue.ToString(System.Globalization.CultureInfo.InvariantCulture));
                            else if (field.Name == "Pour_n_personnes" && int.TryParse(value, out int intValue))
                                values.Add(intValue.ToString());
                            else if (field.Name == "Quantité" && int.TryParse(value, out intValue))
                                values.Add(intValue.ToString());
                            else if (field.Name == "Code_Postal" && int.TryParse(value, out intValue))
                                values.Add(intValue.ToString());
                            else if (field.Name == "No_Rue" && int.TryParse(value, out intValue))
                                values.Add(intValue.ToString());
                            else if (field.Name == "Numéro_de_téléphone" && int.TryParse(value, out intValue))
                                values.Add(intValue.ToString());
                            else if (field.Name == "Type_de_compte" || field.Name == "Terminé" || field.Name == "Disponibilité")
                            {
                                // Convertir explicitement les valeurs booléennes
                                if (value.ToLower() == "true" || value == "1")
                                    values.Add("1");
                                else if (value.ToLower() == "false" || value == "0")
                                    values.Add("0");
                                else
                                    values.Add("0"); // Valeur par défaut si la conversion échoue
                            }
                            else if (string.IsNullOrEmpty(value))
                                values.Add("NULL");
                            else
                                values.Add($"'{value}'");
                        }

                        string query = $"INSERT INTO {table} ({string.Join(", ", columns)}) " +
                                      $"VALUES ({string.Join(", ", values)});";
                        using (MySqlCommand cmd = new MySqlCommand(query, connexion))
                        {
                            cmd.ExecuteNonQuery();
                        }
                    }
                }

                // Réactiver les contraintes de clés étrangères
                using (MySqlCommand cmd = new MySqlCommand("SET FOREIGN_KEY_CHECKS=1;", connexion))
                {
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception e)
            {
                MessageBox.Show("Erreur lors du chargement XML : " + e.Message);
            }
        }
    }
}
